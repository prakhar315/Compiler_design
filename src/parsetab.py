
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftISEQUALSISNOTEQUALSleftISGREATERTHANISLESSTHANISGREATERTHANEQUALISLESSTHANEQUALleftPLUSMINUSleftTIMESDIVIDEMODULUSrightNOTUMINUSALIGNAS ALIGNOF AND ANDEQUALS ARROW ASM AUTO BITAND BITNOT BITOR BITSHIFTLEFT BITSHIFTRIGHT BITXOR BOOL BREAK CASE CHAR CHARLITERAL COLON COMMA CONDITIONAL CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDEEQUALS DO DOT DOUBLE ELSE ENUM EQUALS EXTERN FALSE FLOAT FOR GOTO IDENTIFIER IF INCREMENT INLINE INT ISEQUALS ISGREATERTHAN ISGREATERTHANEQUAL ISLESSTHAN ISLESSTHANEQUAL ISNOTEQUALS LBRACE LEFTSHIFTEQUALS LONG LPAREN LSQUARE MINUS MINUSEQUALS MODULUS MODULUSEQUALS NOT NULLPTR NUMBER OR OREQUALS PLUS PLUSEQUALS PREPROCESSOR RBRACE REGISTER RESTRICT RETURN RIGHTSHIFTEQUALS RPAREN RSQUARE SEMICOLON SHORT SIGNED SIZEOF STATIC STRINGLITERAL STRUCT SWITCH TIMES TIMESEQUALS TRUE TYPEDEF TYPEOF UNION UNSIGNED VOID VOLATILE WHILE XOREQUALSprogram : external_declaration\n               | program external_declarationexternal_declaration : function\n                            | declaration SEMICOLONdeclaration : type IDENTIFIER\n                   | type IDENTIFIER EQUALS expressionfunction : type IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACEparameter_list : parameter\n                      | parameter_list COMMA parameter\n                      | emptyparameter : type IDENTIFIERtype : INT\n            | VOID\n            | CHAR\n            | FLOAT\n            | DOUBLEstatements : statement\n                  | statements statementstatement : declaration SEMICOLON\n                 | expression SEMICOLON\n                 | if_statement\n                 | while_statement\n                 | for_statement\n                 | return_statement\n                 | blockblock : LBRACE statements RBRACEif_statement : IF LPAREN expression RPAREN statement\n                    | IF LPAREN expression RPAREN statement ELSE statementwhile_statement : WHILE LPAREN expression RPAREN statementfor_statement : FOR LPAREN opt_expression SEMICOLON opt_expression SEMICOLON opt_expression RPAREN statementopt_expression : expression\n                      | emptyreturn_statement : RETURN expression SEMICOLON\n                        | RETURN SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULUS expression\n                  | expression ISGREATERTHAN expression\n                  | expression ISLESSTHAN expression\n                  | expression ISGREATERTHANEQUAL expression\n                  | expression ISLESSTHANEQUAL expression\n                  | expression ISEQUALS expression\n                  | expression ISNOTEQUALS expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expression\n                  | MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDENTIFIERexpression : IDENTIFIER EQUALS expressionexpression : IDENTIFIER LPAREN argument_list RPARENargument_list : expression\n                     | argument_list COMMA expression\n                     | emptyempty :'
    
_lr_action_items = {'INT':([0,1,2,3,11,12,14,28,47,68,69,70,73,74,75,76,77,85,86,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[6,6,-1,-3,-2,-4,6,6,6,6,6,-17,-21,-22,-23,-24,-25,6,-7,-18,-19,-20,-34,-26,-33,6,6,-27,-29,6,-28,6,-30,]),'VOID':([0,1,2,3,11,12,14,28,47,68,69,70,73,74,75,76,77,85,86,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[7,7,-1,-3,-2,-4,7,7,7,7,7,-17,-21,-22,-23,-24,-25,7,-7,-18,-19,-20,-34,-26,-33,7,7,-27,-29,7,-28,7,-30,]),'CHAR':([0,1,2,3,11,12,14,28,47,68,69,70,73,74,75,76,77,85,86,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[8,8,-1,-3,-2,-4,8,8,8,8,8,-17,-21,-22,-23,-24,-25,8,-7,-18,-19,-20,-34,-26,-33,8,8,-27,-29,8,-28,8,-30,]),'FLOAT':([0,1,2,3,11,12,14,28,47,68,69,70,73,74,75,76,77,85,86,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[9,9,-1,-3,-2,-4,9,9,9,9,9,-17,-21,-22,-23,-24,-25,9,-7,-18,-19,-20,-34,-26,-33,9,9,-27,-29,9,-28,9,-30,]),'DOUBLE':([0,1,2,3,11,12,14,28,47,68,69,70,73,74,75,76,77,85,86,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[10,10,-1,-3,-2,-4,10,10,10,10,10,-17,-21,-22,-23,-24,-25,10,-7,-18,-19,-20,-34,-26,-33,10,10,-27,-29,10,-28,10,-30,]),'$end':([1,2,3,11,12,86,],[0,-1,-3,-2,-4,-7,]),'SEMICOLON':([4,13,20,21,25,44,45,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,72,81,82,84,92,93,99,100,101,105,108,],[12,-5,-52,-6,-51,-49,-48,-53,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-50,88,89,94,-54,-5,-58,102,105,-31,-32,-58,110,]),'IDENTIFIER':([5,6,7,8,9,10,15,16,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,67,68,69,70,73,74,75,76,77,81,83,85,87,88,89,90,91,92,94,96,102,103,104,105,106,107,109,110,111,113,114,],[13,-12,-13,-14,-15,-16,20,26,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,84,20,20,-17,-21,-22,-23,-24,-25,20,20,20,-18,-19,-20,20,20,20,-34,-26,-33,20,20,20,-27,-29,20,20,-28,20,-30,]),'LPAREN':([13,15,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,68,69,70,73,74,75,76,77,78,79,80,81,83,85,87,88,89,90,91,92,94,96,102,103,104,105,106,107,109,110,111,113,114,],[14,24,30,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-17,-21,-22,-23,-24,-25,90,91,92,24,24,24,-18,-19,-20,24,24,24,-34,-26,-33,24,24,24,-27,-29,24,24,-28,24,-30,]),'EQUALS':([13,20,84,],[15,29,15,]),'RPAREN':([14,17,18,19,20,25,26,30,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,82,95,97,98,100,101,110,112,],[-58,27,-8,-10,-52,-51,-11,-58,-49,-48,66,-9,-53,82,-55,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-50,-54,-56,103,104,-31,-32,-58,113,]),'COMMA':([14,17,18,19,20,25,26,30,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,82,95,],[-58,28,-8,-10,-52,-51,-11,-58,-49,-48,-9,-53,83,-55,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-50,-54,-56,]),'NOT':([15,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,68,69,70,73,74,75,76,77,81,83,85,87,88,89,90,91,92,94,96,102,103,104,105,106,107,109,110,111,113,114,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-17,-21,-22,-23,-24,-25,23,23,23,-18,-19,-20,23,23,23,-34,-26,-33,23,23,23,-27,-29,23,23,-28,23,-30,]),'MINUS':([15,20,21,22,23,24,25,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,72,73,74,75,76,77,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,100,102,103,104,105,106,107,109,110,111,113,114,],[22,-52,32,22,22,22,-51,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-49,-48,32,22,32,32,-35,-36,-37,-38,-39,32,32,32,32,32,32,32,32,-50,22,22,-17,32,-21,-22,-23,-24,-25,22,-54,22,22,-18,-19,-20,22,22,22,32,-34,32,-26,32,32,32,-33,22,22,22,-27,-29,22,22,-28,22,-30,]),'NUMBER':([15,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,68,69,70,73,74,75,76,77,81,83,85,87,88,89,90,91,92,94,96,102,103,104,105,106,107,109,110,111,113,114,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-17,-21,-22,-23,-24,-25,25,25,25,-18,-19,-20,25,25,25,-34,-26,-33,25,25,25,-27,-29,25,25,-28,25,-30,]),'PLUS':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,31,-51,-49,-48,31,31,31,-35,-36,-37,-38,-39,31,31,31,31,31,31,31,31,-50,31,-54,31,31,31,31,31,]),'TIMES':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,33,-51,-49,-48,33,33,33,33,33,-37,-38,-39,33,33,33,33,33,33,33,33,-50,33,-54,33,33,33,33,33,]),'DIVIDE':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,34,-51,-49,-48,34,34,34,34,34,-37,-38,-39,34,34,34,34,34,34,34,34,-50,34,-54,34,34,34,34,34,]),'MODULUS':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,35,-51,-49,-48,35,35,35,35,35,-37,-38,-39,35,35,35,35,35,35,35,35,-50,35,-54,35,35,35,35,35,]),'ISGREATERTHAN':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,36,-51,-49,-48,36,36,36,-35,-36,-37,-38,-39,-40,-41,-42,-43,36,36,36,36,-50,36,-54,36,36,36,36,36,]),'ISLESSTHAN':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,37,-51,-49,-48,37,37,37,-35,-36,-37,-38,-39,-40,-41,-42,-43,37,37,37,37,-50,37,-54,37,37,37,37,37,]),'ISGREATERTHANEQUAL':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,38,-51,-49,-48,38,38,38,-35,-36,-37,-38,-39,-40,-41,-42,-43,38,38,38,38,-50,38,-54,38,38,38,38,38,]),'ISLESSTHANEQUAL':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,39,-51,-49,-48,39,39,39,-35,-36,-37,-38,-39,-40,-41,-42,-43,39,39,39,39,-50,39,-54,39,39,39,39,39,]),'ISEQUALS':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,40,-51,-49,-48,40,40,40,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,40,40,-50,40,-54,40,40,40,40,40,]),'ISNOTEQUALS':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,41,-51,-49,-48,41,41,41,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,41,41,-50,41,-54,41,41,41,41,41,]),'AND':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,42,-51,-49,-48,42,42,42,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,42,-50,42,-54,42,42,42,42,42,]),'OR':([20,21,25,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,82,93,95,97,98,100,],[-52,43,-51,-49,-48,43,43,43,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-50,43,-54,43,43,43,43,43,]),'LBRACE':([27,47,68,69,70,73,74,75,76,77,85,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[47,68,68,68,-17,-21,-22,-23,-24,-25,68,-18,-19,-20,-34,-26,-33,68,68,-27,-29,68,-28,68,-30,]),'IF':([47,68,69,70,73,74,75,76,77,85,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[78,78,78,-17,-21,-22,-23,-24,-25,78,-18,-19,-20,-34,-26,-33,78,78,-27,-29,78,-28,78,-30,]),'WHILE':([47,68,69,70,73,74,75,76,77,85,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[79,79,79,-17,-21,-22,-23,-24,-25,79,-18,-19,-20,-34,-26,-33,79,79,-27,-29,79,-28,79,-30,]),'FOR':([47,68,69,70,73,74,75,76,77,85,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[80,80,80,-17,-21,-22,-23,-24,-25,80,-18,-19,-20,-34,-26,-33,80,80,-27,-29,80,-28,80,-30,]),'RETURN':([47,68,69,70,73,74,75,76,77,85,87,88,89,94,96,102,103,104,106,107,109,111,113,114,],[81,81,81,-17,-21,-22,-23,-24,-25,81,-18,-19,-20,-34,-26,-33,81,81,-27,-29,81,-28,81,-30,]),'RBRACE':([69,70,73,74,75,76,77,85,87,88,89,94,96,102,106,107,111,114,],[86,-17,-21,-22,-23,-24,-25,96,-18,-19,-20,-34,-26,-33,-27,-29,-28,-30,]),'ELSE':([73,74,75,76,77,88,89,94,96,102,106,107,111,114,],[-21,-22,-23,-24,-25,-19,-20,-34,-26,-33,109,-29,-28,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'external_declaration':([0,1,],[2,11,]),'function':([0,1,],[3,3,]),'declaration':([0,1,47,68,69,85,103,104,109,113,],[4,4,71,71,71,71,71,71,71,71,]),'type':([0,1,14,28,47,68,69,85,103,104,109,113,],[5,5,16,16,67,67,67,67,67,67,67,67,]),'parameter_list':([14,],[17,]),'parameter':([14,28,],[18,48,]),'empty':([14,30,92,105,110,],[19,52,101,101,101,]),'expression':([15,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47,68,69,81,83,85,90,91,92,103,104,105,109,110,113,],[21,44,45,46,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,72,72,72,93,95,72,97,98,100,72,72,100,72,100,72,]),'argument_list':([30,],[50,]),'statements':([47,68,],[69,85,]),'statement':([47,68,69,85,103,104,109,113,],[70,70,87,87,106,107,111,114,]),'if_statement':([47,68,69,85,103,104,109,113,],[73,73,73,73,73,73,73,73,]),'while_statement':([47,68,69,85,103,104,109,113,],[74,74,74,74,74,74,74,74,]),'for_statement':([47,68,69,85,103,104,109,113,],[75,75,75,75,75,75,75,75,]),'return_statement':([47,68,69,85,103,104,109,113,],[76,76,76,76,76,76,76,76,]),'block':([47,68,69,85,103,104,109,113,],[77,77,77,77,77,77,77,77,]),'opt_expression':([92,105,110,],[99,108,112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> external_declaration','program',1,'p_program','parser.py',21),
  ('program -> program external_declaration','program',2,'p_program','parser.py',22),
  ('external_declaration -> function','external_declaration',1,'p_external_declaration','parser.py',29),
  ('external_declaration -> declaration SEMICOLON','external_declaration',2,'p_external_declaration','parser.py',30),
  ('declaration -> type IDENTIFIER','declaration',2,'p_declaration','parser.py',34),
  ('declaration -> type IDENTIFIER EQUALS expression','declaration',4,'p_declaration','parser.py',35),
  ('function -> type IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE','function',8,'p_function','parser.py',42),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',46),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',47),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parser.py',48),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','parser.py',55),
  ('type -> INT','type',1,'p_type','parser.py',59),
  ('type -> VOID','type',1,'p_type','parser.py',60),
  ('type -> CHAR','type',1,'p_type','parser.py',61),
  ('type -> FLOAT','type',1,'p_type','parser.py',62),
  ('type -> DOUBLE','type',1,'p_type','parser.py',63),
  ('statements -> statement','statements',1,'p_statements','parser.py',67),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',68),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement','parser.py',75),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',76),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',77),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',78),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',79),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',80),
  ('statement -> block','statement',1,'p_statement','parser.py',81),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',85),
  ('if_statement -> IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',89),
  ('if_statement -> IF LPAREN expression RPAREN statement ELSE statement','if_statement',7,'p_if_statement','parser.py',90),
  ('while_statement -> WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',97),
  ('for_statement -> FOR LPAREN opt_expression SEMICOLON opt_expression SEMICOLON opt_expression RPAREN statement','for_statement',9,'p_for_statement','parser.py',101),
  ('opt_expression -> expression','opt_expression',1,'p_opt_expression','parser.py',105),
  ('opt_expression -> empty','opt_expression',1,'p_opt_expression','parser.py',106),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',110),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',111),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',118),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',119),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',120),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',121),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','parser.py',122),
  ('expression -> expression ISGREATERTHAN expression','expression',3,'p_expression_binop','parser.py',123),
  ('expression -> expression ISLESSTHAN expression','expression',3,'p_expression_binop','parser.py',124),
  ('expression -> expression ISGREATERTHANEQUAL expression','expression',3,'p_expression_binop','parser.py',125),
  ('expression -> expression ISLESSTHANEQUAL expression','expression',3,'p_expression_binop','parser.py',126),
  ('expression -> expression ISEQUALS expression','expression',3,'p_expression_binop','parser.py',127),
  ('expression -> expression ISNOTEQUALS expression','expression',3,'p_expression_binop','parser.py',128),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',129),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',130),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',134),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',135),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',139),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',143),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',147),
  ('expression -> IDENTIFIER EQUALS expression','expression',3,'p_expression_assign','parser.py',151),
  ('expression -> IDENTIFIER LPAREN argument_list RPAREN','expression',4,'p_expression_call','parser.py',155),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',159),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',160),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',161),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',168),
]
